# A GitHub Actions workflow that builds a package on many platforms.

# Copyright (C) 2024-2025 Free Software Foundation, Inc.
#
# This file is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Reference documentation for this file:
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#
# Syntax of multiline strings in YAML: https://yaml-multiline.info/
#
# Customization:
# - Review and adapt the part of this file before the 'jobs:' line.
# - You can disable a particular job by adding a line
#     if: ${{ false }}
# - You can disable a particular matrix value for a particular job by adding an
#   'exclude' element to the 'matrix' element, such as:
#        exclude:
#          - bitness: 64

name: Produce tarball and make check

on:
  push:
  schedule:
    # Doc: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
    # POSIX cron syntax: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07
    - cron: '9 8 * * 1'

# Variables.
env:
  package: texinfo
  # TEXINFO_XS_CONVERT is not set as an env variable directly, because
  # env variables seems to be in the environment, but not automatically
  # passed to scripts, maybe because there is no export.  Use context
  # property to set and export.  Avoid a context property that is compared
  # to a number and in particular to 0 because GitHub performs loose equality
  # comparisons with automatic casting and conversion, often to 0, prefer
  # strings yes/no
  unset_xs_convert: no
  # URL suitable for 'git clone'
  #gnulib_url: https://git.savannah.gnu.org/git/gnulib.git
  gnulib_url: https://github.com/coreutils/gnulib.git
  # URL prefix suitable for downloading individual files through 'wget'
  #gnulib_url_prefix: https://gitweb.git.savannah.gnu.org/gitweb/?p=gnulib.git;a=blob_plain;hb=HEAD;f=
  gnulib_url_prefix: https://raw.githubusercontent.com/coreutils/gnulib/refs/heads/master/

jobs:
  build-tarball:
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      - run: uname -a
      - run: id
      - run: env | LC_ALL=C sort
      - run: pwd
      # Install Ubuntu packages.
      # List of packages: https://packages.ubuntu.com/
      - run: sudo apt update; sudo apt install gettext gperf help2man texlive-base texlive-latex-base texlive-fonts-recommended ghostscript libncurses-dev libperl-dev libdata-compare-perl libtest-deep-perl
      - run: |
          ./build-tarball.sh '${{ env.package }}'
      # Doc: https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-build-tarball-failed
          path: |
            ${{ env.package }}/config.cache
            ${{ env.package }}/config.log
            ${{ env.package }}/config.status
            ${{ env.package }}/config.h
            ${{ env.package }}/log[1234]
          retention-days: 7
          overwrite: true
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - uses: actions/upload-artifact@v4
        with:
          name: tarball
          path: ${{ env.package }}/${{ env.package }}-*.tar.gz
          if-no-files-found: error
          retention-days: 7
          compression-level: 0
          overwrite: true
  # We can run max. 20 "make check" jobs in parallel, max. 5 of them being on macOS.
  # See https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration
  check-linux-gnu-ubuntu:
    name: make check on Ubuntu GNU/Linux
    #if: ${{ false }}
    needs: build-tarball
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      - run: uname -a
      - run: id
      - run: env | LC_ALL=C sort
      - run: pwd
      # Install Ubuntu packages.
      # List of packages: https://packages.ubuntu.com/
      # - run: sudo apt update; sudo apt install ...
      # Note that we do not install libperl-dev, so the C main program will
      # not be compiled.
      - run: sudo apt update; sudo apt install libncurses-dev libdata-compare-perl libtest-deep-perl
      - run: |
          pwd
          ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
          export CPPFLAGS="-Wall"
          export PERL_EXT_CPPFLAGS="$CPPFLAGS"
          ./build-on.sh '${{ env.package }}' '--enable-additional-checks' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-linux-gnu-ubuntu
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  check-linux-gnu-centos:
    name: make check on CentOS GNU/Linux
    #if: ${{ false }}
    needs: build-tarball
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      - uses: addnab/docker-run-action@v3
        with:
          image: centos:7
          options: -v ${{ github.workspace }}:/work
          # No perl(Data::Compare) so tta/perl/t/*.t tests are not checked
          # perl-Test-Harness for prove
          # perl-ExtUtils-ParseXS for xsubpp
          run: |
            uname -a
            id
            env | LC_ALL=C sort
            pwd
            : "The CentOS packages repository has moved on 2024-07-01."
            sed -i -e 's|^mirrorlist=|#mirrorlist=|' -e 's|^#baseurl=http://mirror\.centos\.org|baseurl=http://vault.centos.org|' /etc/yum.repos.d/CentOS-Base.repo
            : "Install CentOS Linux packages"
            : "List of packages: http://vault.centos.org/centos/7/os/x86_64/Packages/"
            yum -y install make file gcc ncurses-devel perl perl-Encode perl-Data-Dumper perl-Unicode-String perl-Test-Harness perl-ExtUtils-ParseXS 'perl(Pod::Simple::PullParser)' 'perl(Pod::Simple::XHTML)' 'perl(Test::More)' 'perl(Test::Deep)'
            cd /work
            ls -l
            ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
            export CPPFLAGS="-Wall"
            export PERL_EXT_CPPFLAGS="$CPPFLAGS"
            ./build-on.sh '${{ env.package }}' '--enable-additional-checks' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-linux-gnu-centos
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  check-linux-gnu-alma:
    name: make check on AlmaLinux GNU/Linux
    #if: ${{ false }}
    needs: build-tarball
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      - uses: addnab/docker-run-action@v3
        with:
          image: almalinux:9
          options: -v ${{ github.workspace }}:/work
          # No perl-Data-Compare so tta/perl/t/*.t tests are not checked
          run: |
            uname -a
            id
            env | LC_ALL=C sort
            pwd
            : "Install AlmaLinux packages"
            : "List of packages: https://repo.almalinux.org/almalinux/9/BaseOS/x86_64/os/Packages/"
            : "                  https://repo.almalinux.org/almalinux/9/AppStream/x86_64/os/Packages/"
            : "                  https://repo.almalinux.org/almalinux/9/CRB/x86_64/os/Packages/"
            : "                  https://repo.almalinux.org/almalinux/9/devel/x86_64/os/Packages/"
            : "Explanation: https://wiki.almalinux.org/repos/AlmaLinux.html"
            yum -y install make gcc ncurses-devel perl perl-Encode perl-Data-Dumper diffutils
            cd /work
            ls -l
            ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
            export CPPFLAGS="-Wall"
            export PERL_EXT_CPPFLAGS="$CPPFLAGS"
            ./build-on.sh '${{ env.package }}' '--enable-additional-checks' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-linux-gnu-alma
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  check-linux-alpine:
    name: make check on Alpine Linux
    #if: ${{ false }}
    needs: build-tarball
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      - uses: addnab/docker-run-action@v3
        with:
          image: alpine:3
          options: -v ${{ github.workspace }}:/work
          # Small distro based on musl, many perl modules not available
          run: |
            uname -a
            id
            env | LC_ALL=C sort
            pwd
            : "Install Alpine Linux packages"
            : "List of packages: https://pkgs.alpinelinux.org/packages"
            apk add make gcc musl-dev perl-dev ncurses-dev
            cd /work
            ls -l
            ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
            export CPPFLAGS="-Wall"
            export PERL_EXT_CPPFLAGS="$CPPFLAGS"
            ./build-on.sh '${{ env.package }}' '--enable-additional-checks' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-linux-alpine
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  check-macos:
    name: make check on macOS
    #if: ${{ false }}
    needs: build-tarball
    # Doc: https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14, macos-15]
    runs-on: ${{ matrix.os }}
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      - run: uname -a
      - run: id
      - run: env | LC_ALL=C sort
      - run: pwd
      # for macos-14 and macos-15 system iconv is found, but is found by
      # configure not to be a working iconv.  Installing libiconv from
      # brew is not enough to make it work, as brew does not override system
      # libraries by default.
      # Install Homebrew packages.
      # List of packages: https://formulae.brew.sh/
      # Note that gettext is in the default set of packages installed by default so the
      # following is not really needed
      - run: ${{ (matrix.os == 'macos-14' || matrix.os == 'macos-15') && 'brew install gettext' || ':' }}
      - run: cpan -i 'Data::Compare' 'Test::Deep'
      # translations fail in the default case, so pass --enable-xs-perl-libintl
      - run: |
          pwd
          ls -l ${HOMEBREW_PREFIX-/usr/local}/opt
          ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
          export CPPFLAGS="-I${HOMEBREW_PREFIX-/usr/local}/opt/gettext/include -Wall"
          export LDFLAGS="-L${HOMEBREW_PREFIX-/usr/local}/opt/gettext/lib"
          export PERL_EXT_CPPFLAGS="$CPPFLAGS"
          export PERL_EXT_LDFLAGS="$LDFLAGS"
          ./build-on.sh '${{ env.package }}' '--enable-additional-checks' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.os }}
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  check-freebsd:
    name: make check on FreeBSD
    #if: ${{ false }}
    needs: build-tarball
    # The FreeBSD runners sometimes get stuck.
    timeout-minutes: 20
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      # Doc: https://github.com/vmactions/freebsd-vm
      - uses: vmactions/freebsd-vm@v1
        with:
          release: '14.0'
          mem: 1024
          usesh: true
          run: |
            set -x
            uname -a
            id
            env | LC_ALL=C sort
            pwd
            : "Install FreeBSD packages"
            : "List of packages: https://ports.freebsd.org/cgi/ports.cgi"
            pkg install -y perl5 gettext-runtime p5-Data-Compare p5-Test-Deep
            ls -l
            ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
            export CPPFLAGS="-I/usr/local/include -Wall"
            export LDFLAGS="-L/usr/local/lib"
            export PERL_EXT_CPPFLAGS="$CPPFLAGS"
            export PERL_EXT_LDFLAGS="$LDFLAGS"
            ./build-on.sh '${{ env.package }}' '' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-freebsd
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  check-netbsd:
    name: make check on NetBSD
    #if: ${{ false }}
    needs: build-tarball
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      # Doc: https://github.com/vmactions/netbsd-vm
      - uses: vmactions/netbsd-vm@v1
        with:
          release: '10.0'
          mem: 1024
          usesh: true
          run: |
            set -x
            uname -a
            id
            env | LC_ALL=C sort
            pwd
            : "Install NetBSD packages"
            : "List of packages: https://ftp.netbsd.org/pub/pkgsrc/current/pkgsrc/index-all.html"
            /usr/sbin/pkg_add perl p5-Data-Compare p5-Test-Deep p5-Clone
            : "or"
            : /usr/sbin/pkg_add pkgin
            : pkgin install ...
            ls -l
            ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
            export CPPFLAGS="-I/usr/pkg/include -Wall"
            export LDFLAGS="-L/usr/pkg/lib"
            export PERL_EXT_CPPFLAGS="$CPPFLAGS"
            export PERL_EXT_LDFLAGS="$LDFLAGS"
            ./build-on.sh '${{ env.package }}' '' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-netbsd
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  check-openbsd:
    name: make check on OpenBSD
    #if: ${{ false }}
    needs: build-tarball
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      # Doc: https://github.com/vmactions/openbsd-vm
      - uses: vmactions/openbsd-vm@v1
        with:
          release: '7.6'
          mem: 1024
          usesh: true
          # Avoid 'sync: sshfs' since it causes trouble with file timestamps
          # and errors from chown() calls:
          # - BSD tar error messages for r--r--r-- files: "tar: Unable to create ...: Permission denied"
          # - GNU tar warnings "Cannot change ownership to uid 0, gid 0: Permission denied"
          #sync: sshfs
          run: |
            set -x
            uname -a
            id
            env | LC_ALL=C sort
            pwd
            : "Install OpenBSD packages"
            : "List of packages: https://cdn.openbsd.org/pub/OpenBSD/7.6/packages/amd64/"
            pkg_add gawk help2man p5-Data-Compare p5-Test-Deep
            ls -l
            ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
            export CPPFLAGS="-I/usr/local/include -Wall"
            export LDFLAGS="-L/usr/local/lib"
            export PERL_EXT_CPPFLAGS="$CPPFLAGS"
            export PERL_EXT_LDFLAGS="$LDFLAGS"
            ./build-on.sh '${{ env.package }}' '--enable-additional-checks' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-openbsd
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  check-solaris11:
    name: make check on Solaris 11
    #if: ${{ false }}
    needs: build-tarball
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      # Doc: https://github.com/vmactions/solaris-vm
      - uses: vmactions/solaris-vm@v1
        with:
          # We can choose among
          # - the '11.4' image and installing gcc from the Oracle packages site, or
          # - the '11.4-gcc' image, that has gcc installed in /opt/csw/bin.
          release: '11.4-gcc'
          mem: 2048
          prepare: |
            : "Install Solaris packages"
            : "List of packages: http://pkg.oracle.com/solaris/release/en/index.shtml"
            pkg install test-deep; ret=$?; test $ret = 0 || test $ret = 4
            cpan -i 'Data::Compare'
          run: |
            set -x
            uname -a
            id
            env | LC_ALL=C sort
            pwd
            ls -l
            ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
            export CPPFLAGS="-Wall -Wno-unused-function"
            export CC="gcc -m64"
            export PERL_EXT_CPPFLAGS="$CPPFLAGS"
            ./build-on.sh '${{ env.package }}' '' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-solaris11
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  check-solaris11-omnios:
    name: make check on Solaris 11 OmniOS
    #if: ${{ false }}
    needs: build-tarball
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      # Doc: https://github.com/vmactions/omnios-vm
      - uses: vmactions/omnios-vm@v1
        with:
          release: "r151048"
          mem: 2048
          prepare: |
            : "Install Solaris packages"
            : "List of packages: https://pkg.omnios.org/r151048/core/en/index.shtml"
            pkg install \
                developer/gcc13 developer/object-file system/header system/library/math \
                developer/build/gnu-make
          run: |
            set -x
            uname -a
            id
            env | LC_ALL=C sort
            pwd
            ls -l
            ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
            export CONFIG_SHELL=/usr/bin/bash
            export CPPFLAGS="-Wall"
            export PERL_EXT_CPPFLAGS="$CPPFLAGS"
            ./build-on.sh '${{ env.package }}' '' 'gmake'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-solaris11-omnios
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  check-cygwin:
    # NOTE 32 bits Cygwin environment is no longer maintained
    name: make check on Cygwin
    #if: ${{ false }}
    needs: build-tarball
    # Doc: https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    strategy:
      fail-fast: false
      matrix:
        bitness: [32, 64]
    runs-on: windows-2022
    defaults:
      run:
        shell: C:\cygwin\bin\bash.exe -eo pipefail -o igncr '{0}'
    env:
      CYGWIN_NOWINPATH: 1
    # The cygwin-64 runner got stuck before probably because of issues with
    # info tests with pseudotty.
    timeout-minutes: 35
    steps:
      # This is needed because we run a script stored in this repository.
      - run: git config --global core.autocrlf input
        shell: cmd
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      # Doc: https://github.com/cygwin/cygwin-install-action
      - uses: cygwin/cygwin-install-action@v4
        with:
          platform: ${{ matrix.bitness == 32 && 'x86' || 'x86_64' }}
          # Install Cygwin packages.
          # libiconv-devel and libintl-devel are brought in as a dependency
          # on x86_64, not on x86.
          # Note that if C++ is compiled, it is important to have gcc-g++
          # explicitely installed, otherwise a MinGW based compiler is found
          # and the build is broken.
          # All the libraries listed as Perl dependencies in Perl Config
          # need to be installed, even if their symbols are not used as
          # otherwise static libraries only are done and the build fails.
          # This includes libcrypt-devel and libnsl-devel.
          # List of packages: https://cygwin.com/packages/package_list.html
          packages: gcc-core make perl perl-Data-Compare perl-Test-Deep libncurses-devel libcrypt-devel libnsl-devel libiconv-devel libintl-devel
      - name: cygcheck
        run: cygcheck -V
      - name: cygcheck
        run: cygcheck -s -r
      - name: Windows version
        run: cmd /c ver
      - run: uname -a
      - run: id
      - run: env | LC_ALL=C sort
      - run: pwd
      - run: ls -l
      - run: echo "$PATH"
      - run: ls -l /usr/bin
      - name: Build in Cygwin
        # We disable tests requiring pseudotty as they fail in the CI.
        # They do not fail when run by the Cygwin Texinfo maintainer.
        # translations fail in the default case, so pass --enable-xs-perl-libintl
        run: |
          ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
          export CPPFLAGS="-Wall"
          export PERL_EXT_CPPFLAGS="$CPPFLAGS"
          ./build-on.sh '${{ env.package }}' '--disable-ptys-tests --enable-additional-checks' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-cygwin${{ matrix.bitness }}
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  check-mingw:
    # this setup uses a native MinGW compiler from within a Cygwin environment
    # and uses native strawberry Perl.  Mixing native strawberry Perl with
    # Cygwin shell bring about several issues:
    # * com interpreter bat files coming with strawberry Perl such as prove.bat
    #   or xsubpp.bat cannot be found nor run by Cygwin shell
    # * carriage returns produced by Perl are not filtered out by the Cygwin
    #   shell
    # * /dev/null is not mapped to NUL
    #
    # Currently libncurses is not in cross MinGW packages, such that
    # it is not possible to setup info tests.
    #
    # Two tests in the tta/tests/ testsuite fail with MinGW from within Cygwin
    # but not with MinGW from MSYS, one because of /dev/null and another
    # because the detected locale is not UTF-8.
    name: check MinGW on Cygwin
    #if: ${{ false }}
    needs: build-tarball
    # Doc: https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    strategy:
      fail-fast: false
      matrix:
        bitness: [32, 64]
    runs-on: windows-2022
    defaults:
      run:
        shell: C:\cygwin\bin\bash.exe -eo pipefail -o igncr '{0}'
    env:
      CYGWIN_NOWINPATH: 1
    steps:
      # This is needed because we run a script stored in this repository.
      - run: git config --global core.autocrlf input
        shell: cmd
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      # Doc: https://github.com/cygwin/cygwin-install-action
      - uses: cygwin/cygwin-install-action@v4
        with:
          platform: x86_64
          # Install Cygwin packages.
          # List of packages: https://cygwin.com/packages/package_list.html
          packages: ${{ matrix.bitness == 32 && 'mingw64-i686-gcc-core mingw64-i686-headers mingw64-i686-runtime' || 'mingw64-x86_64-gcc-core mingw64-x86_64-headers mingw64-x86_64-runtime' }} make
      - name: cygcheck
        run: cygcheck -V
      - name: cygcheck
        run: cygcheck -s -r
      - name: Windows version
        run: cmd /c ver
      - run: uname -a
      - run: id
      - run: env | LC_ALL=C sort
      - run: pwd
      - run: ls -l
      - run: echo "$PATH"
      - run: ls -l /usr/bin
      # shows that xsubpp and prove are present as .bat files that cannot be
      # natively found nor run by Cygwin shell
      - name: Perl directories listings
        run: |
          set -x
          ls /cygdrive/c/Strawberry/c/bin
          ls /cygdrive/c/Strawberry/perl/site/bin
          ls /cygdrive/c/Strawberry/perl/bin
      - name: Build in Cygwin
        run: |
          set -x
          ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
          PATH=/usr/${{ matrix.bitness == 32 && 'i686' || 'x86_64' }}-w64-mingw32/sys-root/mingw/bin:$PATH
          export CC=${{ matrix.bitness == 32 && 'i686' || 'x86_64' }}-w64-mingw32-gcc
          export CPPFLAGS="-Wall"
          export PERL_EXT_CPPFLAGS="$CPPFLAGS"
          ./build-on.sh '${{ env.package }}' '--host=${{ matrix.bitness == 32 && 'i686' || 'x86_64' }}-w64-mingw32 --enable-additional-checks' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-mingw${{ matrix.bitness }}
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  check-msvc:
    name: make check on MSVC
    needs: build-tarball
    # This package is not supported on MSVC.
    if: ${{ false }}
    # Doc: https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    strategy:
      fail-fast: false
      matrix:
        bitness: [32, 64]
    runs-on: windows-2022
    defaults:
      run:
        shell: C:\cygwin\bin\bash.exe -eo pipefail -o igncr '{0}'
    env:
      CYGWIN_NOWINPATH: 1
    steps:
      # This is needed because we run a script stored in this repository.
      - run: git config --global core.autocrlf input
        shell: cmd
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      # Doc: https://github.com/ilammy/msvc-dev-cmd
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.bitness == 32 && 'x86' || 'x64' }}
      # Doc: https://github.com/cygwin/cygwin-install-action
      - uses: cygwin/cygwin-install-action@v4
        with:
          platform: x86_64
          # Install Cygwin packages.
          # List of packages: https://cygwin.com/packages/package_list.html
          packages: wget make
      - name: cygcheck
        run: cygcheck -V
      - name: cygcheck
        run: cygcheck -s -r
      - name: Windows version
        run: cmd /c ver
      - run: uname -a
      - run: id
      - run: env | LC_ALL=C sort
      - run: pwd
      - run: ls -l
      - run: echo "$PATH"
      - run: ls -l /usr/bin
      - run: |
          wget -O ar-lib "${gnulib_url_prefix}build-aux/ar-lib"
          wget -O compile "${gnulib_url_prefix}build-aux/compile"
          chmod a+x ar-lib compile
      - name: Build in Cygwin
        env:
          arch: ${{ matrix.bitness == 32 && 'x86' || 'x64' }}
          pathelementsuffix: ${{ matrix.bitness == 64 && '/amd64' || '' }}
          libelementsuffix: ${{ matrix.bitness == 64 && '\amd64' || '' }}
        run: |
          set -x
          : "Windows C library headers and libraries."
          WindowsCrtIncludeDir='C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt'
          WindowsCrtLibDir='C:\Program Files (x86)\Windows Kits\10\Lib\10.0.10240.0\ucrt\'
          INCLUDE="${WindowsCrtIncludeDir};$INCLUDE"
          LIB="${WindowsCrtLibDir}${arch};$LIB"
          : "Windows API headers and libraries."
          WindowsSdkIncludeDir='C:\Program Files (x86)\Windows Kits\8.1\Include\'
          WindowsSdkLibDir='C:\Program Files (x86)\Windows Kits\8.1\Lib\winv6.3\um\'
          INCLUDE="${WindowsSdkIncludeDir}um;${WindowsSdkIncludeDir}shared;$INCLUDE"
          LIB="${WindowsSdkLibDir}${arch};$LIB"
          : "Visual C++ tools, headers and libraries."
          VSINSTALLDIR='C:\Program Files (x86)\Microsoft Visual Studio 14.0'
          VCINSTALLDIR="${VSINSTALLDIR}"'\VC'
          PATH=`cygpath -u "${VCINSTALLDIR}"`/bin${pathelementsuffix}:"$PATH"
          INCLUDE="${VCINSTALLDIR}"'\include;'"${INCLUDE}"
          LIB="${VCINSTALLDIR}"'\lib'"${libelementsuffix};${LIB}"
          export INCLUDE LIB
          : "Possible values are _WIN32_WINNT_WINXP, _WIN32_WINNT_VISTA, _WIN32_WINNT_WIN7"
          win32_target=_WIN32_WINNT_WINXP
          export CPPFLAGS="-D_WIN32_WINNT=$win32_target"
          export CC="`pwd`/compile cl -nologo"; export CFLAGS="-MD"
          export LD="link"
          export NM="dumpbin -symbols"
          export STRIP=":"
          export AR="`pwd`/ar-lib lib"
          export RANLIB=":"
          ./build-on.sh '${{ env.package }}' '--host=${{ matrix.bitness == 32 && 'i686' || 'x86_64' }}-w64-mingw32' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-msvc${{ matrix.bitness }}
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  # This is not a platform-specific test, but very useful for finding bugs.
  check-sanitized:
    name: make check with sanitizers
    #if: ${{ false }}
    needs: build-tarball
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      - run: uname -a
      - run: id
      - run: env | LC_ALL=C sort
      - run: pwd
      # Install Ubuntu packages.
      # List of packages: https://packages.ubuntu.com/
      - run: sudo apt update; sudo apt install libncurses-dev libperl-dev libdata-compare-perl libtest-deep-perl
      - run: |
          pwd
          ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
          export CPPFLAGS="-Wall"
          export CC="clang -fsanitize=address,undefined,signed-integer-overflow,shift,integer-divide-by-zero -fno-sanitize-recover=undefined"
          export CFLAGS="-O0 -fno-omit-frame-pointer -ggdb"
          export ASAN_OPTIONS="detect_leaks=0 abort_on_error=1 allocator_may_return_null=1"
          # does not work, __asan_init symbol is not found even if the linker
          # is clang called with -fsanitize=address
          # export PERL_EXT_CC=$CC
          # does not work, got ASan runtime does not come first in initial library list
          # export PERL_EXT_CFLAGS="-fsanitize=address,undefined,signed-integer-overflow,shift,integer-divide-by-zero -fno-sanitize-recover=undefined $CFLAGS"
          # export PERL_EXT_LDFLAGS="-fsanitize=address,undefined,signed-integer-overflow,shift,integer-divide-by-zero -fno-sanitize-recover=undefined"
          export PERL_EXT_CFLAGS="$CFLAGS"
          export PERL_EXT_CPPFLAGS=$CPPFLAGS
          ./build-on.sh '${{ env.package }}' '--enable-additional-checks' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-sanitized
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  # This is not a platform-specific test, but very useful for finding ISO C23 compliance bugs.
  check-newest-clang:
    name: make check with the newest clang release
    #if: ${{ false }}
    needs: build-tarball
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      - uses: addnab/docker-run-action@v3
        with:
          # A Docker container with the newest clang release, based on Debian 12.
          image: tuxmake/clang-20:latest
          options: -v ${{ github.workspace }}:/work
          run: |
            uname -a
            cat /etc/os-release
            id
            env | LC_ALL=C sort
            pwd
            : "Install Debian packages."
            : "List of packages: https://packages.debian.org/"
            : "apt update; apt -y install ..."
            apt update; apt -y install libncurses-dev libperl-dev libdata-compare-perl libtest-deep-perl
            cd /work
            ls -l
            ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
            export CC=clang
            export CPPFLAGS="-Wall"
            export PERL_EXT_CC=$CC
            export PERL_EXT_CPPFLAGS=$CPPFLAGS
            ./build-on.sh '${{ env.package }}' '--enable-additional-checks' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-newest-clang
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[1234]
            ${{ env.package }}-*/build/info/test-suite.log
            ${{ env.package }}-*/build/install-info/tests/test-suite.log
            ${{ env.package }}-*/build/tta/perl/test-suite.log
            ${{ env.package }}-*/build/tta/swig/perl/test-suite.log
            ${{ env.package }}-*/build/tta/tests/test-suite.log
            ${{ env.package }}-*/build/tta/tests/many_input_files/test-suite.log
            ${{ env.package }}-*/build/Pod-Simple-Texinfo/test-suite.log
            ${{ env.package }}-*/build/texindex/test-suite.log
            ${{ env.package }}-*/build/util/test-suite.log
          retention-days: 7
          overwrite: true
  # This is not a platform-specific test, but very useful for finding cross-compilation bugs.
  check-cross:
    name: make check with a cross-compiler
    needs: build-tarball
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      - run: uname -a
      - run: id
      - run: env | LC_ALL=C sort
      - run: pwd
      # Install Ubuntu packages.
      # List of packages: https://packages.ubuntu.com/
      - run: sudo apt update; sudo apt install gcc-riscv64-linux-gnu
      - run: |
          pwd
          ${{ env.unset_xs_convert == 'yes' && 'export TEXINFO_XS_CONVERT=0' || ':' }}
          export CPPFLAGS="-Wall"
          export PERL_EXT_CPPFLAGS="$CPPFLAGS"
          export CC="riscv64-linux-gnu-gcc"
          ./build-on.sh '${{ env.package }}' '--host=riscv64-linux-gnu --enable-additional-checks' 'make'
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-cross
          path: |
            ${{ env.package }}-*/build/config.cache
            ${{ env.package }}-*/build/config.log
            ${{ env.package }}-*/build/config.status
            ${{ env.package }}-*/build/config.h
            ${{ env.package }}-*/build/tta/config.cache
            ${{ env.package }}-*/build/tta/config.log
            ${{ env.package }}-*/build/tta/config.status
            ${{ env.package }}-*/build/tta/C/config.h
            ${{ env.package }}-*/build/log[12]
          retention-days: 7
          overwrite: true
